#include <stdio.h>
#include <stdlib.h>
struct Graph {
    int vertices;
    int **adjMatrix;
};
struct Graph *createGraph(int n) {
    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
    graph->vertices = n;
    graph->adjMatrix = (int **)malloc(sizeof(int *) * n);
    for (int i = 0; i < n; i++) {
        graph->adjMatrix[i] = (int *)malloc(sizeof(int) * n);
        for (int j = 0; j < n; j++)
            graph->adjMatrix[i][j] = 0;
    }
    return graph;
}
void addEdge(struct Graph *graph, int src, int dest) {
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1;
}
void DFS(struct Graph *graph, int startVertex, int visited[]) {
    printf("%d ", startVertex);
    visited[startVertex] = 1;
    for (int i = 0; i < graph->vertices; i++) {
        if (graph->adjMatrix[startVertex][i] == 1 && !visited[i])
            DFS(graph, i, visited);
    }
}
int main() {
    int vertices = 6;
    struct Graph *graph = createGraph(vertices);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);
    int *visited = (int *)malloc(sizeof(int) * vertices);
    for (int i = 0; i < vertices; i++)
        visited[i] = 0;
    printf("Depth First Traversal (starting from vertex 0): ");
    DFS(graph, 0, visited);
    printf("\n");
    free(visited);
    return 0;
}
