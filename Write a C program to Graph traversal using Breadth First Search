#include <stdio.h>
#include <stdlib.h>
struct Queue {
    int *arr;
    int front;
    int rear;
    int capacity;
};
struct Queue *createQueue(int capacity) {
    struct Queue *queue = (struct Queue *)malloc(sizeof(struct Queue));
    queue->arr = (int *)malloc(sizeof(int) * capacity);
    queue->front = -1;
    queue->rear = -1;
    queue->capacity = capacity;
    return queue;
}
int isEmpty(struct Queue *queue) {
    return queue->front == -1;
}
void enqueue(struct Queue *queue, int item) {
    if (queue->rear == queue->capacity - 1)
        return;
    if (isEmpty(queue))
        queue->front = 0;
    queue->rear++;
    queue->arr[queue->rear] = item;
}
int dequeue(struct Queue *queue) {
    if (isEmpty(queue))
        return -1;
    int item = queue->arr[queue->front];
    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else
        queue->front++;
    return item;
}
struct Graph {
    int vertices;
    int **adjMatrix;
};
struct Graph *createGraph(int n) {
    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
    graph->vertices = n;
    graph->adjMatrix = (int **)malloc(sizeof(int *) * n);
    for (int i = 0; i < n; i++) {
        graph->adjMatrix[i] = (int *)malloc(sizeof(int) * n);
        for (int j = 0; j < n; j++)
            graph->adjMatrix[i][j] = 0;
    }
    return graph;
}
void addEdge(struct Graph *graph, int src, int dest) {
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1;
}
void BFS(struct Graph *graph, int startVertex) {
    int visited[graph->vertices];
    for (int i = 0; i < graph->vertices; i++)
        visited[i] = 0;
    struct Queue *queue = createQueue(graph->vertices);
    enqueue(queue, startVertex);
    visited[startVertex] = 1;
    printf("Breadth First Traversal (starting from vertex %d): ", startVertex);
    while (!isEmpty(queue)) {
        int currentVertex = dequeue(queue);
        printf("%d ", currentVertex);
        for (int i = 0; i < graph->vertices; i++) {
            if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                enqueue(queue, i);
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}
int main() {
    int vertices = 6;
    struct Graph *graph = createGraph(vertices);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);
    BFS(graph, 0);
    return 0;
}
